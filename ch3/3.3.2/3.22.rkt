#lang scheme

(require r5rs)

(define (make-queue)
  (let ((head-ptr '())
	(tail-ptr '()))
    (define (empty-queue?) 
      (null? head-ptr))
    (define (front-queue) 
      (if (empty-queue?)
	  (error "FRONT called with an empty queue" head-ptr)
	  (car head-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
	(cond ((empty-queue?)
	       (set! head-ptr new-pair)
	       (set! tail-ptr new-pair)
	       head-ptr)
	      (else 
		(set-cdr! tail-ptr new-pair)
		(set! tail-ptr new-pair)
		head-ptr))))
    (define (delete-queue!)
      (cond ((empty-queue?)
	     (error "DELETE! called with an empty queue" head-ptr))
	    (else 
	      (set! head-ptr (cdr head-ptr))
	      head-ptr)))
    (define (dispatch m) 
      (cond ((eq? m 'empty-queue?) empty-queue?)	
	    ((eq? m 'front-queue) front-queue)
	    ((eq? m 'insert-queue!) insert-queue!)
	    ((eq? m 'delete-queue!) delete-queue!)))
    dispatch))
(define (empty-queue? q) ((q 'empty-queue?)))
(define (front-queue q) ((q 'front-queue)))
(define (insert-queue! q item) ((q 'insert-queue!) item))
(define (delete-queue! q) ((q 'delete-queue!)))


; test
(define q (make-queue))
(empty-queue? q)
(insert-queue! q 'a)
(insert-queue! q 'b)
(delete-queue! q)
(delete-queue! q)
(delete-queue! q)
