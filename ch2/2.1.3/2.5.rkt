#lang scheme
(define (cons a b)
  (* (expt 2 a)
     (expt 3 b)))
(define (divide-times n d)
  (define (iter n cnt)
    (let ((rest (remainder n d)))
      (if (= rest 0)
          (iter (/ n d) (+ cnt 1))
          cnt)))
  (iter n 0))
(define (car z)
  (divide-times z 2))
(define (cdr z)
  (divide-times z 3))
; test
(define z (cons 3 6))
(car z)
(cdr z)