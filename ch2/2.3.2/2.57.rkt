#lang scheme
; from 2.56 and only changed:
; augend, multiplicand
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
;(define (augend s) (caddr s))
(define (augend s)
  (let ((rest (cddr s)))
    (if (> (length rest) 1)
        (cons '+ rest)
        (car rest))))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else (list '+ a1 a2))))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
;(define (multiplicand p) (caddr p))
(define (multiplicand p)
  (let ((rest (cddr p)))
    (if (> (length rest) 1)
        (cons '* rest)
        (car rest))))
(define (=number? exp num) (and (number? exp) (= exp num)))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (base x) (cadr x))
(define (exponent x) (caddr x))
(define (make-exponentiation b e)
  (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        (else (list '** b e))))

; 微分函数
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        ((sum? exp) (make-sum (deriv (addend exp) var)
                              (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentiation? exp)
         (let ((b (base exp))
               (e (exponent exp)))
           (let ((expd (make-exponentiation b
                                            (if (number? e)
                                                (- e 1)
                                                (list '- e 1)))))
             (make-product e
                           (make-product expd
                                         (deriv b var))))))
        (else
         (error "unknown expression type: DERIV" exp))))
; test
(deriv '(+ x y 3) 'x)
(deriv '(* x y 5) 'x)
(deriv '(* (* x y 5) (+ x y 3)) 'x)